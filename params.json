{"name":"Raspaudio","tagline":"A buildroot rootfs for the raspberry pi that will play a simple pulseaudio stream","body":"raspaudio\r\n============\r\n\r\nSmall project to use buildroot and Raspberry pi to send audio from a pulseaudio source to a HiFi system\r\n\r\n\r\nCompiling\r\n---------\r\n\r\n\t$ git clone --recursive <repository>\r\n\t$ cd raspaudio\r\n\t$ make\r\n\r\nAt this point, you should have images ready to install on your raspberrypi in the output/images/ subdirectory\r\n\r\ndetails on how to install on the raspberry-pi are available in the file buildroot/board/raspberrypi/readme\r\n\r\n\r\nEnabling streaming on the PC\r\n----------------------------\r\n\r\nOnce your raspberrypi is pluged on the back of your HiFi you need to have your PC stream to it.\r\n\r\nUse the paprefs program from pulseaudio to enable detection of network sound devices\r\n\r\nUse pavucontrol to use the newly detected devices.\r\n\r\nSound should be streamed from your PC to your raspberrypi\r\n\r\nNote that there might be some time delay between the two. We have observed that these delays tend to disapear over time.\r\n\r\n\r\nAdapting raspaudio to your need\r\n-------------------------------\r\n\r\nRaspaudio is based on the the [buildroot](http://buildroot.org) project. You can simply type\r\n\r\n\tmake menuconfig\r\n\r\nIn the repository to adapt raspaudio to you own needs. There is only one raspaudio specific configuration option\r\nin the *User-Defined* section. It allows you to set a whitelist of IP adresses that are allowed to stream to the\r\ndevice. If that option is not set anybody can stream to the device\r\n\r\nTechnical details\r\n-----------------\r\n\r\nThe aim of this project is both to have an easy way to stream audio from the PC to the living-room and \r\nto have a clean buildroot project. This section will provide more details on this configuration\r\n\r\n\r\nPackage details\r\n---------------\r\n\r\nraspaudio is based on buildroot's raspberrypi_defconfig with the following differences\r\n\r\n* enable ALSA : needed for audio\r\n* enable Pulseaudio : receive pulseaudio streams\r\n* enable Avahi : advertise service on the network\r\n* enable ntpdate : update clock on startup\r\n* enable openssh : to have a ssh server on the target\r\n* modify busybox : enable dhcp retry if server doesn't respond\r\n* overlay network configuration : enable eth0, use dhcp for configuration\r\n* post build script : add the public key of the build machine to the authorized keys of root for convienience\r\n* post build script : generate the whitelist in pulseaudio's configuration files\r\n\r\n\r\nBuildroot configuration\r\n-----------------------\r\n\r\nThe buildroot installation has been customized to allow all configuration files to be moved out of the buildroot subdirectory \r\n\r\n* changed dl dir to dl/ (out of the buildroot subdirectory)\r\n* changed busybox default config file to busybox-config\r\n* added a makefile in the project's root directory to be able to build from there\r\n* set buildroot's output directory to output/ (out of the buildroot subdirectory)\r\n* set buildroot's BR2_EXTERNAL to the root of the project (out of the buildroot subdirectory)\r\n* added a raspaudio specific configuration option in Config.mk\r\n* The makefile will backup any change to the .config file to raspaudio_defconfig immediately\r\n\r\nReusing the Raspaudio infrastructure in your own project\r\n--------------------------------------------------------\r\n\r\nRaspaudio properly integrates buildroot as a git submodule. To create a project working in a similar way, you just have to do the following steps\r\n```shell\r\n$ mkdir new_project\r\n$ cd new_project\r\n$ git init\r\n$ git submodule add git://git.buildroot.net/buildroot buildroot\r\n$ wget https://raw.github.com/Openwide-Ingenierie/raspaudio/master/Makefile\r\n$ touch Config.in\r\n$ touch external.mk\r\n$ echo \"output/\" > .gitignore\r\n$ echo \"dl/\" >> .gitignore\r\n```\r\nChange the field PROJECT_NAME in the Makefile to the name of your project\r\n```shell\r\n$ git add Makefile external.mk Config.in .gitignore\r\n$ git commit -m\"Project infrastructure\"\r\n```\r\nYou can now configure your project in the usual buildroot way. For example :\r\n```\r\n$ make raspberrypi_defconfig\r\n$ make menuconfig\r\n```\r\nDon't forget to save in git the configuration file $(PROJECT_NAME)_defconfig","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}